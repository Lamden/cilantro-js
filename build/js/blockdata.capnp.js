/* tslint:disable */
/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */
import * as capnp from "capnp-ts";
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
import { SubBlock } from "./subblock.capnp";
export const _capnpFileId = "c9a01417cf45e892";
export class BlockMetaData extends __S {
    adoptBlockHash(value) { __S.adopt(value, __S.getPointer(0, this)); }
    disownBlockHash() { return __S.disown(this.getBlockHash()); }
    getBlockHash() { return __S.getData(0, this); }
    hasBlockHash() { return !__S.isNull(__S.getPointer(0, this)); }
    initBlockHash(length) { return __S.initData(0, length, this); }
    setBlockHash(value) { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptMerkleRoots(value) { __S.adopt(value, __S.getPointer(1, this)); }
    disownMerkleRoots() { return __S.disown(this.getMerkleRoots()); }
    getMerkleRoots() { return __S.getList(1, capnp.DataList, this); }
    hasMerkleRoots() { return !__S.isNull(__S.getPointer(1, this)); }
    initMerkleRoots(length) { return __S.initList(1, capnp.DataList, length, this); }
    setMerkleRoots(value) { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptInputHashes(value) { __S.adopt(value, __S.getPointer(2, this)); }
    disownInputHashes() { return __S.disown(this.getInputHashes()); }
    getInputHashes() { return __S.getList(2, capnp.DataList, this); }
    hasInputHashes() { return !__S.isNull(__S.getPointer(2, this)); }
    initInputHashes(length) { return __S.initList(2, capnp.DataList, length, this); }
    setInputHashes(value) { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptPrevBlockHash(value) { __S.adopt(value, __S.getPointer(3, this)); }
    disownPrevBlockHash() { return __S.disown(this.getPrevBlockHash()); }
    getPrevBlockHash() { return __S.getData(3, this); }
    hasPrevBlockHash() { return !__S.isNull(__S.getPointer(3, this)); }
    initPrevBlockHash(length) { return __S.initData(3, length, this); }
    setPrevBlockHash(value) { __S.copyFrom(value, __S.getPointer(3, this)); }
    getTimestamp() { return __S.getUint64(0, this); }
    setTimestamp(value) { __S.setUint64(0, value, this); }
    adoptBlockOwners(value) { __S.adopt(value, __S.getPointer(4, this)); }
    disownBlockOwners() { return __S.disown(this.getBlockOwners()); }
    getBlockOwners() { return __S.getList(4, capnp.TextList, this); }
    hasBlockOwners() { return !__S.isNull(__S.getPointer(4, this)); }
    initBlockOwners(length) { return __S.initList(4, capnp.TextList, length, this); }
    setBlockOwners(value) { __S.copyFrom(value, __S.getPointer(4, this)); }
    getBlockNum() { return __S.getUint32(8, this); }
    setBlockNum(value) { __S.setUint32(8, value, this); }
    toString() { return "BlockMetaData_" + super.toString(); }
}
BlockMetaData._capnp = { displayName: "BlockMetaData", id: "dd0177e724054c5d", size: new __O(16, 5) };
export class BlockData extends __S {
    adoptBlockHash(value) { __S.adopt(value, __S.getPointer(0, this)); }
    disownBlockHash() { return __S.disown(this.getBlockHash()); }
    getBlockHash() { return __S.getData(0, this); }
    hasBlockHash() { return !__S.isNull(__S.getPointer(0, this)); }
    initBlockHash(length) { return __S.initData(0, length, this); }
    setBlockHash(value) { __S.copyFrom(value, __S.getPointer(0, this)); }
    getBlockNum() { return __S.getUint32(0, this); }
    setBlockNum(value) { __S.setUint32(0, value, this); }
    adoptBlockOwners(value) { __S.adopt(value, __S.getPointer(1, this)); }
    disownBlockOwners() { return __S.disown(this.getBlockOwners()); }
    getBlockOwners() { return __S.getList(1, capnp.DataList, this); }
    hasBlockOwners() { return !__S.isNull(__S.getPointer(1, this)); }
    initBlockOwners(length) { return __S.initList(1, capnp.DataList, length, this); }
    setBlockOwners(value) { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptPrevBlockHash(value) { __S.adopt(value, __S.getPointer(2, this)); }
    disownPrevBlockHash() { return __S.disown(this.getPrevBlockHash()); }
    getPrevBlockHash() { return __S.getData(2, this); }
    hasPrevBlockHash() { return !__S.isNull(__S.getPointer(2, this)); }
    initPrevBlockHash(length) { return __S.initData(2, length, this); }
    setPrevBlockHash(value) { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptSubBlocks(value) { __S.adopt(value, __S.getPointer(3, this)); }
    disownSubBlocks() { return __S.disown(this.getSubBlocks()); }
    getSubBlocks() { return __S.getList(3, BlockData._SubBlocks, this); }
    hasSubBlocks() { return !__S.isNull(__S.getPointer(3, this)); }
    initSubBlocks(length) { return __S.initList(3, BlockData._SubBlocks, length, this); }
    setSubBlocks(value) { __S.copyFrom(value, __S.getPointer(3, this)); }
    toString() { return "BlockData_" + super.toString(); }
}
BlockData._capnp = { displayName: "BlockData", id: "f98cc24b685706f9", size: new __O(8, 4) };
export class BlockIndexRequest extends __S {
    adoptBlockHash(value) { __S.adopt(value, __S.getPointer(0, this)); }
    disownBlockHash() { return __S.disown(this.getBlockHash()); }
    getBlockHash() { return __S.getData(0, this); }
    hasBlockHash() { return !__S.isNull(__S.getPointer(0, this)); }
    initBlockHash(length) { return __S.initData(0, length, this); }
    setBlockHash(value) { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptSender(value) { __S.adopt(value, __S.getPointer(1, this)); }
    disownSender() { return __S.disown(this.getSender()); }
    getSender() { return __S.getData(1, this); }
    hasSender() { return !__S.isNull(__S.getPointer(1, this)); }
    initSender(length) { return __S.initData(1, length, this); }
    setSender(value) { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString() { return "BlockIndexRequest_" + super.toString(); }
}
BlockIndexRequest._capnp = { displayName: "BlockIndexRequest", id: "e97c97a11c19fd1a", size: new __O(0, 2) };
export class BlockDataRequest extends __S {
    getBlockNum() { return __S.getUint32(0, this); }
    setBlockNum(value) { __S.setUint32(0, value, this); }
    toString() { return "BlockDataRequest_" + super.toString(); }
}
BlockDataRequest._capnp = { displayName: "BlockDataRequest", id: "eb86891d2091c94e", size: new __O(8, 0) };
export class BlockIndex extends __S {
    getBlockNum() { return __S.getUint32(0, this); }
    setBlockNum(value) { __S.setUint32(0, value, this); }
    adoptBlockHash(value) { __S.adopt(value, __S.getPointer(0, this)); }
    disownBlockHash() { return __S.disown(this.getBlockHash()); }
    getBlockHash() { return __S.getData(0, this); }
    hasBlockHash() { return !__S.isNull(__S.getPointer(0, this)); }
    initBlockHash(length) { return __S.initData(0, length, this); }
    setBlockHash(value) { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptBlockOwners(value) { __S.adopt(value, __S.getPointer(1, this)); }
    disownBlockOwners() { return __S.disown(this.getBlockOwners()); }
    getBlockOwners() { return __S.getList(1, capnp.DataList, this); }
    hasBlockOwners() { return !__S.isNull(__S.getPointer(1, this)); }
    initBlockOwners(length) { return __S.initList(1, capnp.DataList, length, this); }
    setBlockOwners(value) { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString() { return "BlockIndex_" + super.toString(); }
}
BlockIndex._capnp = { displayName: "BlockIndex", id: "f19d70a63fffaa42", size: new __O(8, 2) };
export class BlockIndexReply extends __S {
    adoptIndices(value) { __S.adopt(value, __S.getPointer(0, this)); }
    disownIndices() { return __S.disown(this.getIndices()); }
    getIndices() { return __S.getList(0, BlockIndexReply._Indices, this); }
    hasIndices() { return !__S.isNull(__S.getPointer(0, this)); }
    initIndices(length) { return __S.initList(0, BlockIndexReply._Indices, length, this); }
    setIndices(value) { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString() { return "BlockIndexReply_" + super.toString(); }
}
BlockIndexReply._capnp = { displayName: "BlockIndexReply", id: "f7dce795ae3241d7", size: new __O(0, 1) };
BlockData._SubBlocks = capnp.CompositeList(SubBlock);
BlockIndexReply._Indices = capnp.CompositeList(BlockIndex);
