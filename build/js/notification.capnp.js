/* tslint:disable */
/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */
import * as capnp from "capnp-ts";
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
export const _capnpFileId = "c9b01417cf45e892";
export var BlockNotification_Which;
(function (BlockNotification_Which) {
    BlockNotification_Which[BlockNotification_Which["FAILED_BLOCK"] = 0] = "FAILED_BLOCK";
    BlockNotification_Which[BlockNotification_Which["NEW_BLOCK"] = 1] = "NEW_BLOCK";
    BlockNotification_Which[BlockNotification_Which["EMPTY_BLOCK"] = 2] = "EMPTY_BLOCK";
    BlockNotification_Which[BlockNotification_Which["PARTIAL_BLOCK"] = 3] = "PARTIAL_BLOCK";
})(BlockNotification_Which || (BlockNotification_Which = {}));
export class BlockNotification extends __S {
    getBlockNum() { return __S.getUint32(0, this); }
    setBlockNum(value) { __S.setUint32(0, value, this); }
    adoptBlockHash(value) { __S.adopt(value, __S.getPointer(0, this)); }
    disownBlockHash() { return __S.disown(this.getBlockHash()); }
    getBlockHash() { return __S.getData(0, this); }
    hasBlockHash() { return !__S.isNull(__S.getPointer(0, this)); }
    initBlockHash(length) { return __S.initData(0, length, this); }
    setBlockHash(value) { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptBlockOwners(value) { __S.adopt(value, __S.getPointer(1, this)); }
    disownBlockOwners() { return __S.disown(this.getBlockOwners()); }
    getBlockOwners() { return __S.getList(1, capnp.TextList, this); }
    hasBlockOwners() { return !__S.isNull(__S.getPointer(1, this)); }
    initBlockOwners(length) { return __S.initList(1, capnp.TextList, length, this); }
    setBlockOwners(value) { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptSubBlockNum(value) { __S.adopt(value, __S.getPointer(2, this)); }
    disownSubBlockNum() { return __S.disown(this.getSubBlockNum()); }
    getSubBlockNum() { return __S.getList(2, BlockNotification._SubBlockNum, this); }
    hasSubBlockNum() { return !__S.isNull(__S.getPointer(2, this)); }
    initSubBlockNum(length) { return __S.initList(2, BlockNotification._SubBlockNum, length, this); }
    setSubBlockNum(value) { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptInputHashes(value) { __S.adopt(value, __S.getPointer(3, this)); }
    disownInputHashes() { return __S.disown(this.getInputHashes()); }
    getInputHashes() { return __S.getList(3, BlockNotification._InputHashes, this); }
    hasInputHashes() { return !__S.isNull(__S.getPointer(3, this)); }
    initInputHashes(length) { return __S.initList(3, BlockNotification._InputHashes, length, this); }
    setInputHashes(value) { __S.copyFrom(value, __S.getPointer(3, this)); }
    isFailedBlock() { return __S.getUint16(4, this) === 0; }
    setFailedBlock() { __S.setUint16(4, 0, this); }
    isNewBlock() { return __S.getUint16(4, this) === 1; }
    setNewBlock() { __S.setUint16(4, 1, this); }
    isEmptyBlock() { return __S.getUint16(4, this) === 2; }
    setEmptyBlock() { __S.setUint16(4, 2, this); }
    isPartialBlock() { return __S.getUint16(4, this) === 3; }
    setPartialBlock() { __S.setUint16(4, 3, this); }
    toString() { return "BlockNotification_" + super.toString(); }
    which() { return __S.getUint16(4, this); }
}
BlockNotification.FAILED_BLOCK = BlockNotification_Which.FAILED_BLOCK;
BlockNotification.NEW_BLOCK = BlockNotification_Which.NEW_BLOCK;
BlockNotification.EMPTY_BLOCK = BlockNotification_Which.EMPTY_BLOCK;
BlockNotification.PARTIAL_BLOCK = BlockNotification_Which.PARTIAL_BLOCK;
BlockNotification._capnp = { displayName: "BlockNotification", id: "f1d7bd54877d7b69", size: new __O(8, 4) };
export class BurnInputHashes extends __S {
    adoptSubBlockNum(value) { __S.adopt(value, __S.getPointer(0, this)); }
    disownSubBlockNum() { return __S.disown(this.getSubBlockNum()); }
    getSubBlockNum() { return __S.getList(0, capnp.Uint32List, this); }
    hasSubBlockNum() { return !__S.isNull(__S.getPointer(0, this)); }
    initSubBlockNum(length) { return __S.initList(0, capnp.Uint32List, length, this); }
    setSubBlockNum(value) { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptInputHashes(value) { __S.adopt(value, __S.getPointer(1, this)); }
    disownInputHashes() { return __S.disown(this.getInputHashes()); }
    getInputHashes() { return __S.getList(1, capnp.DataList, this); }
    hasInputHashes() { return !__S.isNull(__S.getPointer(1, this)); }
    initInputHashes(length) { return __S.initList(1, capnp.DataList, length, this); }
    setInputHashes(value) { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString() { return "BurnInputHashes_" + super.toString(); }
}
BurnInputHashes._capnp = { displayName: "BurnInputHashes", id: "c0418edbf5c97e01", size: new __O(0, 2) };
BlockNotification._SubBlockNum = capnp.PointerList(capnp.Uint32List);
BlockNotification._InputHashes = capnp.PointerList(capnp.DataList);
