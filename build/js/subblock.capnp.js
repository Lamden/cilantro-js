/* tslint:disable */
/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */
import * as capnp from "capnp-ts";
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
import { TransactionData } from "./transaction.capnp";
export const _capnpFileId = "ab5e7866e64c6d4d";
export class MerkleProof extends __S {
    adoptHash(value) { __S.adopt(value, __S.getPointer(0, this)); }
    disownHash() { return __S.disown(this.getHash()); }
    getHash() { return __S.getData(0, this); }
    hasHash() { return !__S.isNull(__S.getPointer(0, this)); }
    initHash(length) { return __S.initData(0, length, this); }
    setHash(value) { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptSigner(value) { __S.adopt(value, __S.getPointer(1, this)); }
    disownSigner() { return __S.disown(this.getSigner()); }
    getSigner() { return __S.getData(1, this); }
    hasSigner() { return !__S.isNull(__S.getPointer(1, this)); }
    initSigner(length) { return __S.initData(1, length, this); }
    setSigner(value) { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptSignature(value) { __S.adopt(value, __S.getPointer(2, this)); }
    disownSignature() { return __S.disown(this.getSignature()); }
    getSignature() { return __S.getData(2, this); }
    hasSignature() { return !__S.isNull(__S.getPointer(2, this)); }
    initSignature(length) { return __S.initData(2, length, this); }
    setSignature(value) { __S.copyFrom(value, __S.getPointer(2, this)); }
    toString() { return "MerkleProof_" + super.toString(); }
}
MerkleProof._capnp = { displayName: "MerkleProof", id: "e655320afe1c3f30", size: new __O(0, 3) };
export class SubBlock extends __S {
    adoptMerkleRoot(value) { __S.adopt(value, __S.getPointer(0, this)); }
    disownMerkleRoot() { return __S.disown(this.getMerkleRoot()); }
    getMerkleRoot() { return __S.getData(0, this); }
    hasMerkleRoot() { return !__S.isNull(__S.getPointer(0, this)); }
    initMerkleRoot(length) { return __S.initData(0, length, this); }
    setMerkleRoot(value) { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptSignatures(value) { __S.adopt(value, __S.getPointer(1, this)); }
    disownSignatures() { return __S.disown(this.getSignatures()); }
    getSignatures() { return __S.getList(1, capnp.DataList, this); }
    hasSignatures() { return !__S.isNull(__S.getPointer(1, this)); }
    initSignatures(length) { return __S.initList(1, capnp.DataList, length, this); }
    setSignatures(value) { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptMerkleLeaves(value) { __S.adopt(value, __S.getPointer(2, this)); }
    disownMerkleLeaves() { return __S.disown(this.getMerkleLeaves()); }
    getMerkleLeaves() { return __S.getList(2, capnp.DataList, this); }
    hasMerkleLeaves() { return !__S.isNull(__S.getPointer(2, this)); }
    initMerkleLeaves(length) { return __S.initList(2, capnp.DataList, length, this); }
    setMerkleLeaves(value) { __S.copyFrom(value, __S.getPointer(2, this)); }
    getSubBlockNum() { return __S.getUint8(0, this); }
    setSubBlockNum(value) { __S.setUint8(0, value, this); }
    adoptInputHash(value) { __S.adopt(value, __S.getPointer(3, this)); }
    disownInputHash() { return __S.disown(this.getInputHash()); }
    getInputHash() { return __S.getData(3, this); }
    hasInputHash() { return !__S.isNull(__S.getPointer(3, this)); }
    initInputHash(length) { return __S.initData(3, length, this); }
    setInputHash(value) { __S.copyFrom(value, __S.getPointer(3, this)); }
    adoptTransactions(value) { __S.adopt(value, __S.getPointer(4, this)); }
    disownTransactions() { return __S.disown(this.getTransactions()); }
    getTransactions() { return __S.getList(4, SubBlock._Transactions, this); }
    hasTransactions() { return !__S.isNull(__S.getPointer(4, this)); }
    initTransactions(length) { return __S.initList(4, SubBlock._Transactions, length, this); }
    setTransactions(value) { __S.copyFrom(value, __S.getPointer(4, this)); }
    toString() { return "SubBlock_" + super.toString(); }
}
SubBlock._capnp = { displayName: "SubBlock", id: "e4fe021c75fd273f", size: new __O(8, 5) };
export class SubBlockContender extends __S {
    adoptResultHash(value) { __S.adopt(value, __S.getPointer(0, this)); }
    disownResultHash() { return __S.disown(this.getResultHash()); }
    getResultHash() { return __S.getData(0, this); }
    hasResultHash() { return !__S.isNull(__S.getPointer(0, this)); }
    initResultHash(length) { return __S.initData(0, length, this); }
    setResultHash(value) { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptInputHash(value) { __S.adopt(value, __S.getPointer(1, this)); }
    disownInputHash() { return __S.disown(this.getInputHash()); }
    getInputHash() { return __S.getData(1, this); }
    hasInputHash() { return !__S.isNull(__S.getPointer(1, this)); }
    initInputHash(length) { return __S.initData(1, length, this); }
    setInputHash(value) { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptMerkleLeaves(value) { __S.adopt(value, __S.getPointer(2, this)); }
    disownMerkleLeaves() { return __S.disown(this.getMerkleLeaves()); }
    getMerkleLeaves() { return __S.getList(2, capnp.DataList, this); }
    hasMerkleLeaves() { return !__S.isNull(__S.getPointer(2, this)); }
    initMerkleLeaves(length) { return __S.initList(2, capnp.DataList, length, this); }
    setMerkleLeaves(value) { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptSignature(value) { __S.adopt(value, __S.getPointer(3, this)); }
    disownSignature() { return __S.disown(this.getSignature()); }
    getSignature() { return __S.getData(3, this); }
    hasSignature() { return !__S.isNull(__S.getPointer(3, this)); }
    initSignature(length) { return __S.initData(3, length, this); }
    setSignature(value) { __S.copyFrom(value, __S.getPointer(3, this)); }
    adoptTransactions(value) { __S.adopt(value, __S.getPointer(4, this)); }
    disownTransactions() { return __S.disown(this.getTransactions()); }
    getTransactions() { return __S.getList(4, capnp.DataList, this); }
    hasTransactions() { return !__S.isNull(__S.getPointer(4, this)); }
    initTransactions(length) { return __S.initList(4, capnp.DataList, length, this); }
    setTransactions(value) { __S.copyFrom(value, __S.getPointer(4, this)); }
    getSubBlockNum() { return __S.getUint8(0, this); }
    setSubBlockNum(value) { __S.setUint8(0, value, this); }
    adoptPrevBlockHash(value) { __S.adopt(value, __S.getPointer(5, this)); }
    disownPrevBlockHash() { return __S.disown(this.getPrevBlockHash()); }
    getPrevBlockHash() { return __S.getData(5, this); }
    hasPrevBlockHash() { return !__S.isNull(__S.getPointer(5, this)); }
    initPrevBlockHash(length) { return __S.initData(5, length, this); }
    setPrevBlockHash(value) { __S.copyFrom(value, __S.getPointer(5, this)); }
    toString() { return "SubBlockContender_" + super.toString(); }
}
SubBlockContender._capnp = { displayName: "SubBlockContender", id: "962d658e0b48b742", size: new __O(8, 6) };
SubBlock._Transactions = capnp.CompositeList(TransactionData);
