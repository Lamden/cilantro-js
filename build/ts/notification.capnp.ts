/* tslint:disable */

/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

import * as capnp from "capnp-ts";
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
export const _capnpFileId = "c9b01417cf45e892";
export enum BlockNotification_Which {
    FAILED_BLOCK = 0,
    NEW_BLOCK = 1,
    EMPTY_BLOCK = 2,
    PARTIAL_BLOCK = 3
}
export class BlockNotification extends __S {
    static readonly FAILED_BLOCK = BlockNotification_Which.FAILED_BLOCK;
    static readonly NEW_BLOCK = BlockNotification_Which.NEW_BLOCK;
    static readonly EMPTY_BLOCK = BlockNotification_Which.EMPTY_BLOCK;
    static readonly PARTIAL_BLOCK = BlockNotification_Which.PARTIAL_BLOCK;
    static readonly _capnp = { displayName: "BlockNotification", id: "f1d7bd54877d7b69", size: new __O(8, 4) };
    static _SubBlockNum: capnp.ListCtor<capnp.List<number>>;
    static _InputHashes: capnp.ListCtor<capnp.List<capnp.Data>>;
    getBlockNum(): number { return __S.getUint32(0, this); }
    setBlockNum(value: number): void { __S.setUint32(0, value, this); }
    adoptBlockHash(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownBlockHash(): capnp.Orphan<capnp.Data> { return __S.disown(this.getBlockHash()); }
    getBlockHash(): capnp.Data { return __S.getData(0, this); }
    hasBlockHash(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initBlockHash(length: number): capnp.Data { return __S.initData(0, length, this); }
    setBlockHash(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptBlockOwners(value: capnp.Orphan<capnp.List<string>>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownBlockOwners(): capnp.Orphan<capnp.List<string>> { return __S.disown(this.getBlockOwners()); }
    getBlockOwners(): capnp.List<string> { return __S.getList(1, capnp.TextList, this); }
    hasBlockOwners(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initBlockOwners(length: number): capnp.List<string> { return __S.initList(1, capnp.TextList, length, this); }
    setBlockOwners(value: capnp.List<string>): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptSubBlockNum(value: capnp.Orphan<capnp.List<capnp.List<number>>>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownSubBlockNum(): capnp.Orphan<capnp.List<capnp.List<number>>> { return __S.disown(this.getSubBlockNum()); }
    getSubBlockNum(): capnp.List<capnp.List<number>> { return __S.getList(2, BlockNotification._SubBlockNum, this); }
    hasSubBlockNum(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initSubBlockNum(length: number): capnp.List<capnp.List<number>> { return __S.initList(2, BlockNotification._SubBlockNum, length, this); }
    setSubBlockNum(value: capnp.List<capnp.List<number>>): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptInputHashes(value: capnp.Orphan<capnp.List<capnp.List<capnp.Data>>>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownInputHashes(): capnp.Orphan<capnp.List<capnp.List<capnp.Data>>> { return __S.disown(this.getInputHashes()); }
    getInputHashes(): capnp.List<capnp.List<capnp.Data>> { return __S.getList(3, BlockNotification._InputHashes, this); }
    hasInputHashes(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initInputHashes(length: number): capnp.List<capnp.List<capnp.Data>> { return __S.initList(3, BlockNotification._InputHashes, length, this); }
    setInputHashes(value: capnp.List<capnp.List<capnp.Data>>): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    isFailedBlock(): boolean { return __S.getUint16(4, this) === 0; }
    setFailedBlock(): void { __S.setUint16(4, 0, this); }
    isNewBlock(): boolean { return __S.getUint16(4, this) === 1; }
    setNewBlock(): void { __S.setUint16(4, 1, this); }
    isEmptyBlock(): boolean { return __S.getUint16(4, this) === 2; }
    setEmptyBlock(): void { __S.setUint16(4, 2, this); }
    isPartialBlock(): boolean { return __S.getUint16(4, this) === 3; }
    setPartialBlock(): void { __S.setUint16(4, 3, this); }
    toString(): string { return "BlockNotification_" + super.toString(); }
    which(): BlockNotification_Which { return __S.getUint16(4, this); }
}
export class BurnInputHashes extends __S {
    static readonly _capnp = { displayName: "BurnInputHashes", id: "c0418edbf5c97e01", size: new __O(0, 2) };
    adoptSubBlockNum(value: capnp.Orphan<capnp.List<number>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownSubBlockNum(): capnp.Orphan<capnp.List<number>> { return __S.disown(this.getSubBlockNum()); }
    getSubBlockNum(): capnp.List<number> { return __S.getList(0, capnp.Uint32List, this); }
    hasSubBlockNum(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initSubBlockNum(length: number): capnp.List<number> { return __S.initList(0, capnp.Uint32List, length, this); }
    setSubBlockNum(value: capnp.List<number>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptInputHashes(value: capnp.Orphan<capnp.List<capnp.Data>>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownInputHashes(): capnp.Orphan<capnp.List<capnp.Data>> { return __S.disown(this.getInputHashes()); }
    getInputHashes(): capnp.List<capnp.Data> { return __S.getList(1, capnp.DataList, this); }
    hasInputHashes(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initInputHashes(length: number): capnp.List<capnp.Data> { return __S.initList(1, capnp.DataList, length, this); }
    setInputHashes(value: capnp.List<capnp.Data>): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "BurnInputHashes_" + super.toString(); }
}
BlockNotification._SubBlockNum = capnp.PointerList(capnp.Uint32List);
BlockNotification._InputHashes = capnp.PointerList(capnp.DataList);
