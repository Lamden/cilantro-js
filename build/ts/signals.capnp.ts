/* tslint:disable */

/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

import * as capnp from "capnp-ts";
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
export const _capnpFileId = "df5825258a6a807b";
export class Signal extends __S {
    static readonly _capnp = { displayName: "Signal", id: "818477010daf6e1b", size: new __O(8, 0) };
    getMessageType(): number { return __S.getUint32(0, this); }
    setMessageType(value: number): void { __S.setUint32(0, value, this); }
    toString(): string { return "Signal_" + super.toString(); }
}
export class ExternalSignal extends __S {
    static readonly _capnp = { displayName: "ExternalSignal", id: "8ebda057f9c00097", size: new __O(8, 2) };
    getId(): number { return __S.getUint32(0, this); }
    setId(value: number): void { __S.setUint32(0, value, this); }
    getTimestamp(): number { return __S.getUint32(4, this); }
    setTimestamp(value: number): void { __S.setUint32(4, value, this); }
    adoptSender(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownSender(): capnp.Orphan<capnp.Data> { return __S.disown(this.getSender()); }
    getSender(): capnp.Data { return __S.getData(0, this); }
    hasSender(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initSender(length: number): capnp.Data { return __S.initData(0, length, this); }
    setSender(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptSignature(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownSignature(): capnp.Orphan<capnp.Data> { return __S.disown(this.getSignature()); }
    getSignature(): capnp.Data { return __S.getData(1, this); }
    hasSignature(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initSignature(length: number): capnp.Data { return __S.initData(1, length, this); }
    setSignature(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "ExternalSignal_" + super.toString(); }
}
export class ExternalMessage extends __S {
    static readonly _capnp = { displayName: "ExternalMessage", id: "bac54a528df98ba7", size: new __O(0, 3) };
    adoptData(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownData(): capnp.Orphan<capnp.Data> { return __S.disown(this.getData()); }
    getData(): capnp.Data { return __S.getData(0, this); }
    hasData(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initData(length: number): capnp.Data { return __S.initData(0, length, this); }
    setData(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptSender(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownSender(): capnp.Orphan<capnp.Data> { return __S.disown(this.getSender()); }
    getSender(): capnp.Data { return __S.getData(1, this); }
    hasSender(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initSender(length: number): capnp.Data { return __S.initData(1, length, this); }
    setSender(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptSignature(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownSignature(): capnp.Orphan<capnp.Data> { return __S.disown(this.getSignature()); }
    getSignature(): capnp.Data { return __S.getData(2, this); }
    hasSignature(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initSignature(length: number): capnp.Data { return __S.initData(2, length, this); }
    setSignature(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    toString(): string { return "ExternalMessage_" + super.toString(); }
}
export class SignedMessage extends __S {
    static readonly _capnp = { displayName: "SignedMessage", id: "b4d13014e93861ff", size: new __O(16, 3) };
    getMsgType(): number { return __S.getUint16(0, this); }
    setMsgType(value: number): void { __S.setUint16(0, value, this); }
    adoptMessage(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownMessage(): capnp.Orphan<capnp.Data> { return __S.disown(this.getMessage()); }
    getMessage(): capnp.Data { return __S.getData(0, this); }
    hasMessage(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initMessage(length: number): capnp.Data { return __S.initData(0, length, this); }
    setMessage(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptSignature(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownSignature(): capnp.Orphan<capnp.Data> { return __S.disown(this.getSignature()); }
    getSignature(): capnp.Data { return __S.getData(1, this); }
    hasSignature(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initSignature(length: number): capnp.Data { return __S.initData(1, length, this); }
    setSignature(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptSignee(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownSignee(): capnp.Orphan<capnp.Data> { return __S.disown(this.getSignee()); }
    getSignee(): capnp.Data { return __S.getData(2, this); }
    hasSignee(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initSignee(length: number): capnp.Data { return __S.initData(2, length, this); }
    setSignee(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    getTimestamp(): number { return __S.getFloat64(8, this); }
    setTimestamp(value: number): void { __S.setFloat64(8, value, this); }
    toString(): string { return "SignedMessage_" + super.toString(); }
}
export class BadRequest extends __S {
    static readonly _capnp = { displayName: "BadRequest", id: "ba6b9f2ade0f7f3c", size: new __O(8, 0) };
    getTimestamp(): number { return __S.getUint32(0, this); }
    setTimestamp(value: number): void { __S.setUint32(0, value, this); }
    toString(): string { return "BadRequest_" + super.toString(); }
}
export class BlockDataRequest extends __S {
    static readonly _capnp = { displayName: "BlockDataRequest", id: "c0cdf2c0bf16813c", size: new __O(8, 0) };
    getBlockNum(): number { return __S.getUint32(0, this); }
    setBlockNum(value: number): void { __S.setUint32(0, value, this); }
    toString(): string { return "BlockDataRequest_" + super.toString(); }
}
export class LatestBlockHeightRequest extends __S {
    static readonly _capnp = { displayName: "LatestBlockHeightRequest", id: "a3ae086310a07ff0", size: new __O(8, 0) };
    getTimestamp(): capnp.Uint64 { return __S.getUint64(0, this); }
    setTimestamp(value: capnp.Uint64): void { __S.setUint64(0, value, this); }
    toString(): string { return "LatestBlockHeightRequest_" + super.toString(); }
}
export class LatestBlockHeightReply extends __S {
    static readonly _capnp = { displayName: "LatestBlockHeightReply", id: "81b3d0863d553fea", size: new __O(8, 0) };
    getBlockHeight(): number { return __S.getUint32(0, this); }
    setBlockHeight(value: number): void { __S.setUint32(0, value, this); }
    toString(): string { return "LatestBlockHeightReply_" + super.toString(); }
}
export class LatestBlockHashRequest extends __S {
    static readonly _capnp = { displayName: "LatestBlockHashRequest", id: "8993ba1ea920ce90", size: new __O(8, 0) };
    getTimestamp(): capnp.Uint64 { return __S.getUint64(0, this); }
    setTimestamp(value: capnp.Uint64): void { __S.setUint64(0, value, this); }
    toString(): string { return "LatestBlockHashRequest_" + super.toString(); }
}
export class LatestBlockHashReply extends __S {
    static readonly _capnp = { displayName: "LatestBlockHashReply", id: "b2761d95c73f528e", size: new __O(0, 1) };
    adoptBlockHash(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownBlockHash(): capnp.Orphan<capnp.Data> { return __S.disown(this.getBlockHash()); }
    getBlockHash(): capnp.Data { return __S.getData(0, this); }
    hasBlockHash(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initBlockHash(length: number): capnp.Data { return __S.initData(0, length, this); }
    setBlockHash(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "LatestBlockHashReply_" + super.toString(); }
}
export class IPForVKRequest extends __S {
    static readonly _capnp = { displayName: "IPForVKRequest", id: "efcc4be5a4aa72b7", size: new __O(0, 1) };
    adoptVk(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownVk(): capnp.Orphan<capnp.Data> { return __S.disown(this.getVk()); }
    getVk(): capnp.Data { return __S.getData(0, this); }
    hasVk(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initVk(length: number): capnp.Data { return __S.initData(0, length, this); }
    setVk(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "IPForVKRequest_" + super.toString(); }
}
export class IPForVKReply extends __S {
    static readonly _capnp = { displayName: "IPForVKReply", id: "8d47ee8b1ae54794", size: new __O(0, 1) };
    adoptIp(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownIp(): capnp.Orphan<capnp.Data> { return __S.disown(this.getIp()); }
    getIp(): capnp.Data { return __S.getData(0, this); }
    hasIp(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initIp(length: number): capnp.Data { return __S.initData(0, length, this); }
    setIp(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "IPForVKReply_" + super.toString(); }
}
export class Acknowledged extends __S {
    static readonly _capnp = { displayName: "Acknowledged", id: "abe13332a739cbe3", size: new __O(8, 0) };
    getTimestamp(): number { return __S.getUint32(0, this); }
    setTimestamp(value: number): void { __S.setUint32(0, value, this); }
    toString(): string { return "Acknowledged_" + super.toString(); }
}
