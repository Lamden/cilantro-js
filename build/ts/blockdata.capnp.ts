/* tslint:disable */

/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

import * as capnp from "capnp-ts";
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
import { MerkleProof, SubBlock, SubBlockContender } from "./subblock.capnp";
export const _capnpFileId = "c9a01417cf45e892";
export class BlockMetaData extends __S {
    static readonly _capnp = { displayName: "BlockMetaData", id: "dd0177e724054c5d", size: new __O(16, 5) };
    adoptBlockHash(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownBlockHash(): capnp.Orphan<capnp.Data> { return __S.disown(this.getBlockHash()); }
    getBlockHash(): capnp.Data { return __S.getData(0, this); }
    hasBlockHash(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initBlockHash(length: number): capnp.Data { return __S.initData(0, length, this); }
    setBlockHash(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptMerkleRoots(value: capnp.Orphan<capnp.List<capnp.Data>>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownMerkleRoots(): capnp.Orphan<capnp.List<capnp.Data>> { return __S.disown(this.getMerkleRoots()); }
    getMerkleRoots(): capnp.List<capnp.Data> { return __S.getList(1, capnp.DataList, this); }
    hasMerkleRoots(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initMerkleRoots(length: number): capnp.List<capnp.Data> { return __S.initList(1, capnp.DataList, length, this); }
    setMerkleRoots(value: capnp.List<capnp.Data>): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptInputHashes(value: capnp.Orphan<capnp.List<capnp.Data>>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownInputHashes(): capnp.Orphan<capnp.List<capnp.Data>> { return __S.disown(this.getInputHashes()); }
    getInputHashes(): capnp.List<capnp.Data> { return __S.getList(2, capnp.DataList, this); }
    hasInputHashes(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initInputHashes(length: number): capnp.List<capnp.Data> { return __S.initList(2, capnp.DataList, length, this); }
    setInputHashes(value: capnp.List<capnp.Data>): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptPrevBlockHash(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownPrevBlockHash(): capnp.Orphan<capnp.Data> { return __S.disown(this.getPrevBlockHash()); }
    getPrevBlockHash(): capnp.Data { return __S.getData(3, this); }
    hasPrevBlockHash(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initPrevBlockHash(length: number): capnp.Data { return __S.initData(3, length, this); }
    setPrevBlockHash(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    getTimestamp(): capnp.Uint64 { return __S.getUint64(0, this); }
    setTimestamp(value: capnp.Uint64): void { __S.setUint64(0, value, this); }
    adoptBlockOwners(value: capnp.Orphan<capnp.List<string>>): void { __S.adopt(value, __S.getPointer(4, this)); }
    disownBlockOwners(): capnp.Orphan<capnp.List<string>> { return __S.disown(this.getBlockOwners()); }
    getBlockOwners(): capnp.List<string> { return __S.getList(4, capnp.TextList, this); }
    hasBlockOwners(): boolean { return !__S.isNull(__S.getPointer(4, this)); }
    initBlockOwners(length: number): capnp.List<string> { return __S.initList(4, capnp.TextList, length, this); }
    setBlockOwners(value: capnp.List<string>): void { __S.copyFrom(value, __S.getPointer(4, this)); }
    getBlockNum(): number { return __S.getUint32(8, this); }
    setBlockNum(value: number): void { __S.setUint32(8, value, this); }
    toString(): string { return "BlockMetaData_" + super.toString(); }
}
export class BlockData extends __S {
    static readonly _capnp = { displayName: "BlockData", id: "f98cc24b685706f9", size: new __O(8, 4) };
    static _SubBlocks: capnp.ListCtor<SubBlock>;
    adoptBlockHash(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownBlockHash(): capnp.Orphan<capnp.Data> { return __S.disown(this.getBlockHash()); }
    getBlockHash(): capnp.Data { return __S.getData(0, this); }
    hasBlockHash(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initBlockHash(length: number): capnp.Data { return __S.initData(0, length, this); }
    setBlockHash(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    getBlockNum(): number { return __S.getUint32(0, this); }
    setBlockNum(value: number): void { __S.setUint32(0, value, this); }
    adoptBlockOwners(value: capnp.Orphan<capnp.List<capnp.Data>>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownBlockOwners(): capnp.Orphan<capnp.List<capnp.Data>> { return __S.disown(this.getBlockOwners()); }
    getBlockOwners(): capnp.List<capnp.Data> { return __S.getList(1, capnp.DataList, this); }
    hasBlockOwners(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initBlockOwners(length: number): capnp.List<capnp.Data> { return __S.initList(1, capnp.DataList, length, this); }
    setBlockOwners(value: capnp.List<capnp.Data>): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptPrevBlockHash(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownPrevBlockHash(): capnp.Orphan<capnp.Data> { return __S.disown(this.getPrevBlockHash()); }
    getPrevBlockHash(): capnp.Data { return __S.getData(2, this); }
    hasPrevBlockHash(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initPrevBlockHash(length: number): capnp.Data { return __S.initData(2, length, this); }
    setPrevBlockHash(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptSubBlocks(value: capnp.Orphan<capnp.List<SubBlock>>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownSubBlocks(): capnp.Orphan<capnp.List<SubBlock>> { return __S.disown(this.getSubBlocks()); }
    getSubBlocks(): capnp.List<SubBlock> { return __S.getList(3, BlockData._SubBlocks, this); }
    hasSubBlocks(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initSubBlocks(length: number): capnp.List<SubBlock> { return __S.initList(3, BlockData._SubBlocks, length, this); }
    setSubBlocks(value: capnp.List<SubBlock>): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    toString(): string { return "BlockData_" + super.toString(); }
}
export class BlockIndexRequest extends __S {
    static readonly _capnp = { displayName: "BlockIndexRequest", id: "e97c97a11c19fd1a", size: new __O(0, 2) };
    adoptBlockHash(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownBlockHash(): capnp.Orphan<capnp.Data> { return __S.disown(this.getBlockHash()); }
    getBlockHash(): capnp.Data { return __S.getData(0, this); }
    hasBlockHash(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initBlockHash(length: number): capnp.Data { return __S.initData(0, length, this); }
    setBlockHash(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptSender(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownSender(): capnp.Orphan<capnp.Data> { return __S.disown(this.getSender()); }
    getSender(): capnp.Data { return __S.getData(1, this); }
    hasSender(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initSender(length: number): capnp.Data { return __S.initData(1, length, this); }
    setSender(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "BlockIndexRequest_" + super.toString(); }
}
export class BlockDataRequest extends __S {
    static readonly _capnp = { displayName: "BlockDataRequest", id: "eb86891d2091c94e", size: new __O(8, 0) };
    getBlockNum(): number { return __S.getUint32(0, this); }
    setBlockNum(value: number): void { __S.setUint32(0, value, this); }
    toString(): string { return "BlockDataRequest_" + super.toString(); }
}
export class BlockIndex extends __S {
    static readonly _capnp = { displayName: "BlockIndex", id: "f19d70a63fffaa42", size: new __O(8, 2) };
    getBlockNum(): number { return __S.getUint32(0, this); }
    setBlockNum(value: number): void { __S.setUint32(0, value, this); }
    adoptBlockHash(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownBlockHash(): capnp.Orphan<capnp.Data> { return __S.disown(this.getBlockHash()); }
    getBlockHash(): capnp.Data { return __S.getData(0, this); }
    hasBlockHash(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initBlockHash(length: number): capnp.Data { return __S.initData(0, length, this); }
    setBlockHash(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptBlockOwners(value: capnp.Orphan<capnp.List<capnp.Data>>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownBlockOwners(): capnp.Orphan<capnp.List<capnp.Data>> { return __S.disown(this.getBlockOwners()); }
    getBlockOwners(): capnp.List<capnp.Data> { return __S.getList(1, capnp.DataList, this); }
    hasBlockOwners(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initBlockOwners(length: number): capnp.List<capnp.Data> { return __S.initList(1, capnp.DataList, length, this); }
    setBlockOwners(value: capnp.List<capnp.Data>): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "BlockIndex_" + super.toString(); }
}
export class BlockIndexReply extends __S {
    static readonly _capnp = { displayName: "BlockIndexReply", id: "f7dce795ae3241d7", size: new __O(0, 1) };
    static _Indices: capnp.ListCtor<BlockIndex>;
    adoptIndices(value: capnp.Orphan<capnp.List<BlockIndex>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownIndices(): capnp.Orphan<capnp.List<BlockIndex>> { return __S.disown(this.getIndices()); }
    getIndices(): capnp.List<BlockIndex> { return __S.getList(0, BlockIndexReply._Indices, this); }
    hasIndices(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initIndices(length: number): capnp.List<BlockIndex> { return __S.initList(0, BlockIndexReply._Indices, length, this); }
    setIndices(value: capnp.List<BlockIndex>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "BlockIndexReply_" + super.toString(); }
}
BlockData._SubBlocks = capnp.CompositeList(SubBlock);
BlockIndexReply._Indices = capnp.CompositeList(BlockIndex);
