/* tslint:disable */

/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

import * as capnp from "capnp-ts";
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
export const _capnpFileId = "93eca3fe49376df5";
export class Seal extends __S {
    static readonly _capnp = { displayName: "Seal", id: "c26ae0f7e8198ed1", size: new __O(0, 2) };
    adoptSignature(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownSignature(): capnp.Orphan<capnp.Data> { return __S.disown(this.getSignature()); }
    getSignature(): capnp.Data { return __S.getData(0, this); }
    hasSignature(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initSignature(length: number): capnp.Data { return __S.initData(0, length, this); }
    setSignature(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptVerifyingKey(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownVerifyingKey(): capnp.Orphan<capnp.Data> { return __S.disown(this.getVerifyingKey()); }
    getVerifyingKey(): capnp.Data { return __S.getData(1, this); }
    hasVerifyingKey(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initVerifyingKey(length: number): capnp.Data { return __S.initData(1, length, this); }
    setVerifyingKey(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "Seal_" + super.toString(); }
}
export class MessageMeta extends __S {
    static readonly _capnp = { displayName: "MessageMeta", id: "ac093d7a9a2a041e", size: new __O(8, 2) };
    getType(): number { return __S.getUint16(0, this); }
    setType(value: number): void { __S.setUint16(0, value, this); }
    getUuid(): number { return __S.getUint32(4, this); }
    setUuid(value: number): void { __S.setUint32(4, value, this); }
    getTimestamp(): string { return __S.getText(0, this); }
    setTimestamp(value: string): void { __S.setText(0, value, this); }
    getSender(): string { return __S.getText(1, this); }
    setSender(value: string): void { __S.setText(1, value, this); }
    toString(): string { return "MessageMeta_" + super.toString(); }
}
export class Envelope extends __S {
    static readonly _capnp = { displayName: "Envelope", id: "ec5602978d00d39b", size: new __O(0, 3) };
    adoptSeal(value: capnp.Orphan<Seal>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownSeal(): capnp.Orphan<Seal> { return __S.disown(this.getSeal()); }
    getSeal(): Seal { return __S.getStruct(0, Seal, this); }
    hasSeal(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initSeal(): Seal { return __S.initStructAt(0, Seal, this); }
    setSeal(value: Seal): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptMeta(value: capnp.Orphan<MessageMeta>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownMeta(): capnp.Orphan<MessageMeta> { return __S.disown(this.getMeta()); }
    getMeta(): MessageMeta { return __S.getStruct(1, MessageMeta, this); }
    hasMeta(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initMeta(): MessageMeta { return __S.initStructAt(1, MessageMeta, this); }
    setMeta(value: MessageMeta): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptMessage(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownMessage(): capnp.Orphan<capnp.Data> { return __S.disown(this.getMessage()); }
    getMessage(): capnp.Data { return __S.getData(2, this); }
    hasMessage(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initMessage(length: number): capnp.Data { return __S.initData(2, length, this); }
    setMessage(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    toString(): string { return "Envelope_" + super.toString(); }
}
