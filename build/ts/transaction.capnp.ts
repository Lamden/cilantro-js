/* tslint:disable */

/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

import * as capnp from "capnp-ts";
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
import { Value, Map } from "./values.capnp";
export const _capnpFileId = "921d030365beff8c";
export class MetaData extends __S {
    static readonly _capnp = { displayName: "MetaData", id: "a70e205986d03e12", size: new __O(8, 2) };
    adoptProof(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownProof(): capnp.Orphan<capnp.Data> { return __S.disown(this.getProof()); }
    getProof(): capnp.Data { return __S.getData(0, this); }
    hasProof(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initProof(length: number): capnp.Data { return __S.initData(0, length, this); }
    setProof(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptSignature(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownSignature(): capnp.Orphan<capnp.Data> { return __S.disown(this.getSignature()); }
    getSignature(): capnp.Data { return __S.getData(1, this); }
    hasSignature(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initSignature(length: number): capnp.Data { return __S.initData(1, length, this); }
    setSignature(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    getTimestamp(): number { return __S.getFloat32(0, this); }
    setTimestamp(value: number): void { __S.setFloat32(0, value, this); }
    toString(): string { return "MetaData_" + super.toString(); }
}
export class TransactionPayload extends __S {
    static readonly _capnp = { displayName: "TransactionPayload", id: "9da7e0d2cce0cea1", size: new __O(16, 5) };
    adoptSender(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownSender(): capnp.Orphan<capnp.Data> { return __S.disown(this.getSender()); }
    getSender(): capnp.Data { return __S.getData(0, this); }
    hasSender(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initSender(length: number): capnp.Data { return __S.initData(0, length, this); }
    setSender(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptProcessor(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownProcessor(): capnp.Orphan<capnp.Data> { return __S.disown(this.getProcessor()); }
    getProcessor(): capnp.Data { return __S.getData(1, this); }
    hasProcessor(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initProcessor(length: number): capnp.Data { return __S.initData(1, length, this); }
    setProcessor(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    getNonce(): capnp.Uint64 { return __S.getUint64(0, this); }
    setNonce(value: capnp.Uint64): void { __S.setUint64(0, value, this); }
    getStampsSupplied(): capnp.Uint64 { return __S.getUint64(8, this); }
    setStampsSupplied(value: capnp.Uint64): void { __S.setUint64(8, value, this); }
    getContractName(): string { return __S.getText(2, this); }
    setContractName(value: string): void { __S.setText(2, value, this); }
    getFunctionName(): string { return __S.getText(3, this); }
    setFunctionName(value: string): void { __S.setText(3, value, this); }
    adoptKwargs(value: capnp.Orphan<Map>): void { __S.adopt(value, __S.getPointer(4, this)); }
    disownKwargs(): capnp.Orphan<Map> { return __S.disown(this.getKwargs()); }
    getKwargs(): Map { return __S.getStruct(4, Map, this); }
    hasKwargs(): boolean { return !__S.isNull(__S.getPointer(4, this)); }
    initKwargs(): Map { return __S.initStructAt(4, Map, this); }
    setKwargs(value: Map): void { __S.copyFrom(value, __S.getPointer(4, this)); }
    toString(): string { return "TransactionPayload_" + super.toString(); }
}
export class Transaction extends __S {
    static readonly _capnp = { displayName: "Transaction", id: "f784dfdeb15a3120", size: new __O(0, 2) };
    adoptMetadata(value: capnp.Orphan<MetaData>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownMetadata(): capnp.Orphan<MetaData> { return __S.disown(this.getMetadata()); }
    getMetadata(): MetaData { return __S.getStruct(0, MetaData, this); }
    hasMetadata(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initMetadata(): MetaData { return __S.initStructAt(0, MetaData, this); }
    setMetadata(value: MetaData): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptPayload(value: capnp.Orphan<TransactionPayload>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownPayload(): capnp.Orphan<TransactionPayload> { return __S.disown(this.getPayload()); }
    getPayload(): TransactionPayload { return __S.getStruct(1, TransactionPayload, this); }
    hasPayload(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initPayload(): TransactionPayload { return __S.initStructAt(1, TransactionPayload, this); }
    setPayload(value: TransactionPayload): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "Transaction_" + super.toString(); }
}
export class TransactionData extends __S {
    static readonly _capnp = { displayName: "TransactionData", id: "a2d62360f4be217c", size: new __O(16, 2) };
    adoptTransaction(value: capnp.Orphan<Transaction>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownTransaction(): capnp.Orphan<Transaction> { return __S.disown(this.getTransaction()); }
    getTransaction(): Transaction { return __S.getStruct(0, Transaction, this); }
    hasTransaction(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initTransaction(): Transaction { return __S.initStructAt(0, Transaction, this); }
    setTransaction(value: Transaction): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    getStatus(): number { return __S.getUint8(0, this); }
    setStatus(value: number): void { __S.setUint8(0, value, this); }
    adoptState(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownState(): capnp.Orphan<capnp.Data> { return __S.disown(this.getState()); }
    getState(): capnp.Data { return __S.getData(1, this); }
    hasState(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initState(length: number): capnp.Data { return __S.initData(1, length, this); }
    setState(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    getStampsUsed(): capnp.Uint64 { return __S.getUint64(8, this); }
    setStampsUsed(value: capnp.Uint64): void { __S.setUint64(8, value, this); }
    toString(): string { return "TransactionData_" + super.toString(); }
}
export class Transactions extends __S {
    static readonly _capnp = { displayName: "Transactions", id: "bbfe7f501da387e9", size: new __O(0, 1) };
    static _Transactions: capnp.ListCtor<Transaction>;
    adoptTransactions(value: capnp.Orphan<capnp.List<Transaction>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownTransactions(): capnp.Orphan<capnp.List<Transaction>> { return __S.disown(this.getTransactions()); }
    getTransactions(): capnp.List<Transaction> { return __S.getList(0, Transactions._Transactions, this); }
    hasTransactions(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initTransactions(length: number): capnp.List<Transaction> { return __S.initList(0, Transactions._Transactions, length, this); }
    setTransactions(value: capnp.List<Transaction>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "Transactions_" + super.toString(); }
}
export class TransactionBatch extends __S {
    static readonly _capnp = { displayName: "TransactionBatch", id: "b7fe07c9f4fa8a5b", size: new __O(8, 4) };
    static _Transactions: capnp.ListCtor<Transaction>;
    adoptTransactions(value: capnp.Orphan<capnp.List<Transaction>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownTransactions(): capnp.Orphan<capnp.List<Transaction>> { return __S.disown(this.getTransactions()); }
    getTransactions(): capnp.List<Transaction> { return __S.getList(0, TransactionBatch._Transactions, this); }
    hasTransactions(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initTransactions(length: number): capnp.List<Transaction> { return __S.initList(0, TransactionBatch._Transactions, length, this); }
    setTransactions(value: capnp.List<Transaction>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    getTimestamp(): number { return __S.getFloat64(0, this); }
    setTimestamp(value: number): void { __S.setFloat64(0, value, this); }
    adoptSignature(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownSignature(): capnp.Orphan<capnp.Data> { return __S.disown(this.getSignature()); }
    getSignature(): capnp.Data { return __S.getData(1, this); }
    hasSignature(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initSignature(length: number): capnp.Data { return __S.initData(1, length, this); }
    setSignature(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptSender(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownSender(): capnp.Orphan<capnp.Data> { return __S.disown(this.getSender()); }
    getSender(): capnp.Data { return __S.getData(2, this); }
    hasSender(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initSender(length: number): capnp.Data { return __S.initData(2, length, this); }
    setSender(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptInputHash(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownInputHash(): capnp.Orphan<capnp.Data> { return __S.disown(this.getInputHash()); }
    getInputHash(): capnp.Data { return __S.getData(3, this); }
    hasInputHash(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initInputHash(length: number): capnp.Data { return __S.initData(3, length, this); }
    setInputHash(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    toString(): string { return "TransactionBatch_" + super.toString(); }
}
Transactions._Transactions = capnp.CompositeList(Transaction);
TransactionBatch._Transactions = capnp.CompositeList(Transaction);
