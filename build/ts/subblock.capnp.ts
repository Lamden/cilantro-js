/* tslint:disable */

/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

import * as capnp from "capnp-ts";
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
import { MetaData, TransactionPayload, Transaction, TransactionData, Transactions, TransactionBatch } from "./transaction.capnp";
export const _capnpFileId = "ab5e7866e64c6d4d";
export class MerkleProof extends __S {
    static readonly _capnp = { displayName: "MerkleProof", id: "e655320afe1c3f30", size: new __O(0, 3) };
    adoptHash(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownHash(): capnp.Orphan<capnp.Data> { return __S.disown(this.getHash()); }
    getHash(): capnp.Data { return __S.getData(0, this); }
    hasHash(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initHash(length: number): capnp.Data { return __S.initData(0, length, this); }
    setHash(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptSigner(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownSigner(): capnp.Orphan<capnp.Data> { return __S.disown(this.getSigner()); }
    getSigner(): capnp.Data { return __S.getData(1, this); }
    hasSigner(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initSigner(length: number): capnp.Data { return __S.initData(1, length, this); }
    setSigner(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptSignature(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownSignature(): capnp.Orphan<capnp.Data> { return __S.disown(this.getSignature()); }
    getSignature(): capnp.Data { return __S.getData(2, this); }
    hasSignature(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initSignature(length: number): capnp.Data { return __S.initData(2, length, this); }
    setSignature(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    toString(): string { return "MerkleProof_" + super.toString(); }
}
export class SubBlock extends __S {
    static readonly _capnp = { displayName: "SubBlock", id: "e4fe021c75fd273f", size: new __O(8, 5) };
    static _Transactions: capnp.ListCtor<TransactionData>;
    adoptMerkleRoot(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownMerkleRoot(): capnp.Orphan<capnp.Data> { return __S.disown(this.getMerkleRoot()); }
    getMerkleRoot(): capnp.Data { return __S.getData(0, this); }
    hasMerkleRoot(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initMerkleRoot(length: number): capnp.Data { return __S.initData(0, length, this); }
    setMerkleRoot(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptSignatures(value: capnp.Orphan<capnp.List<capnp.Data>>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownSignatures(): capnp.Orphan<capnp.List<capnp.Data>> { return __S.disown(this.getSignatures()); }
    getSignatures(): capnp.List<capnp.Data> { return __S.getList(1, capnp.DataList, this); }
    hasSignatures(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initSignatures(length: number): capnp.List<capnp.Data> { return __S.initList(1, capnp.DataList, length, this); }
    setSignatures(value: capnp.List<capnp.Data>): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptMerkleLeaves(value: capnp.Orphan<capnp.List<capnp.Data>>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownMerkleLeaves(): capnp.Orphan<capnp.List<capnp.Data>> { return __S.disown(this.getMerkleLeaves()); }
    getMerkleLeaves(): capnp.List<capnp.Data> { return __S.getList(2, capnp.DataList, this); }
    hasMerkleLeaves(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initMerkleLeaves(length: number): capnp.List<capnp.Data> { return __S.initList(2, capnp.DataList, length, this); }
    setMerkleLeaves(value: capnp.List<capnp.Data>): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    getSubBlockNum(): number { return __S.getUint8(0, this); }
    setSubBlockNum(value: number): void { __S.setUint8(0, value, this); }
    adoptInputHash(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownInputHash(): capnp.Orphan<capnp.Data> { return __S.disown(this.getInputHash()); }
    getInputHash(): capnp.Data { return __S.getData(3, this); }
    hasInputHash(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initInputHash(length: number): capnp.Data { return __S.initData(3, length, this); }
    setInputHash(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    adoptTransactions(value: capnp.Orphan<capnp.List<TransactionData>>): void { __S.adopt(value, __S.getPointer(4, this)); }
    disownTransactions(): capnp.Orphan<capnp.List<TransactionData>> { return __S.disown(this.getTransactions()); }
    getTransactions(): capnp.List<TransactionData> { return __S.getList(4, SubBlock._Transactions, this); }
    hasTransactions(): boolean { return !__S.isNull(__S.getPointer(4, this)); }
    initTransactions(length: number): capnp.List<TransactionData> { return __S.initList(4, SubBlock._Transactions, length, this); }
    setTransactions(value: capnp.List<TransactionData>): void { __S.copyFrom(value, __S.getPointer(4, this)); }
    toString(): string { return "SubBlock_" + super.toString(); }
}
export class SubBlockContender extends __S {
    static readonly _capnp = { displayName: "SubBlockContender", id: "962d658e0b48b742", size: new __O(8, 6) };
    adoptResultHash(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownResultHash(): capnp.Orphan<capnp.Data> { return __S.disown(this.getResultHash()); }
    getResultHash(): capnp.Data { return __S.getData(0, this); }
    hasResultHash(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initResultHash(length: number): capnp.Data { return __S.initData(0, length, this); }
    setResultHash(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptInputHash(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownInputHash(): capnp.Orphan<capnp.Data> { return __S.disown(this.getInputHash()); }
    getInputHash(): capnp.Data { return __S.getData(1, this); }
    hasInputHash(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initInputHash(length: number): capnp.Data { return __S.initData(1, length, this); }
    setInputHash(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptMerkleLeaves(value: capnp.Orphan<capnp.List<capnp.Data>>): void { __S.adopt(value, __S.getPointer(2, this)); }
    disownMerkleLeaves(): capnp.Orphan<capnp.List<capnp.Data>> { return __S.disown(this.getMerkleLeaves()); }
    getMerkleLeaves(): capnp.List<capnp.Data> { return __S.getList(2, capnp.DataList, this); }
    hasMerkleLeaves(): boolean { return !__S.isNull(__S.getPointer(2, this)); }
    initMerkleLeaves(length: number): capnp.List<capnp.Data> { return __S.initList(2, capnp.DataList, length, this); }
    setMerkleLeaves(value: capnp.List<capnp.Data>): void { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptSignature(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(3, this)); }
    disownSignature(): capnp.Orphan<capnp.Data> { return __S.disown(this.getSignature()); }
    getSignature(): capnp.Data { return __S.getData(3, this); }
    hasSignature(): boolean { return !__S.isNull(__S.getPointer(3, this)); }
    initSignature(length: number): capnp.Data { return __S.initData(3, length, this); }
    setSignature(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(3, this)); }
    adoptTransactions(value: capnp.Orphan<capnp.List<capnp.Data>>): void { __S.adopt(value, __S.getPointer(4, this)); }
    disownTransactions(): capnp.Orphan<capnp.List<capnp.Data>> { return __S.disown(this.getTransactions()); }
    getTransactions(): capnp.List<capnp.Data> { return __S.getList(4, capnp.DataList, this); }
    hasTransactions(): boolean { return !__S.isNull(__S.getPointer(4, this)); }
    initTransactions(length: number): capnp.List<capnp.Data> { return __S.initList(4, capnp.DataList, length, this); }
    setTransactions(value: capnp.List<capnp.Data>): void { __S.copyFrom(value, __S.getPointer(4, this)); }
    getSubBlockNum(): number { return __S.getUint8(0, this); }
    setSubBlockNum(value: number): void { __S.setUint8(0, value, this); }
    adoptPrevBlockHash(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(5, this)); }
    disownPrevBlockHash(): capnp.Orphan<capnp.Data> { return __S.disown(this.getPrevBlockHash()); }
    getPrevBlockHash(): capnp.Data { return __S.getData(5, this); }
    hasPrevBlockHash(): boolean { return !__S.isNull(__S.getPointer(5, this)); }
    initPrevBlockHash(length: number): capnp.Data { return __S.initData(5, length, this); }
    setPrevBlockHash(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(5, this)); }
    toString(): string { return "SubBlockContender_" + super.toString(); }
}
SubBlock._Transactions = capnp.CompositeList(TransactionData);
