/* tslint:disable */

/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */

import * as capnp from "capnp-ts";
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
export const _capnpFileId = "921d030365beff8c";
export class MetaData extends __S {
    static readonly _capnp = { displayName: "MetaData", id: "a70e205986d03e12", size: new __O(8, 2) };
    adoptProof(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownProof(): capnp.Orphan<capnp.Data> { return __S.disown(this.getProof()); }
    getProof(): capnp.Data { return __S.getData(0, this); }
    hasProof(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initProof(length: number): capnp.Data { return __S.initData(0, length, this); }
    setProof(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptSignature(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownSignature(): capnp.Orphan<capnp.Data> { return __S.disown(this.getSignature()); }
    getSignature(): capnp.Data { return __S.getData(1, this); }
    hasSignature(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initSignature(length: number): capnp.Data { return __S.initData(1, length, this); }
    setSignature(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    getTimestamp(): number { return __S.getFloat32(0, this); }
    setTimestamp(value: number): void { __S.setFloat32(0, value, this); }
    toString(): string { return "MetaData_" + super.toString(); }
}
export class ContractPayload extends __S {
    static readonly _capnp = { displayName: "ContractPayload", id: "a2f9223e3c957376", size: new __O(8, 5) };
    getSender(): string { return __S.getText(0, this); }
    setSender(value: string): void { __S.setText(0, value, this); }
    getNonce(): string { return __S.getText(1, this); }
    setNonce(value: string): void { __S.setText(1, value, this); }
    getStampsSupplied(): capnp.Uint64 { return __S.getUint64(0, this); }
    setStampsSupplied(value: capnp.Uint64): void { __S.setUint64(0, value, this); }
    getContractName(): string { return __S.getText(2, this); }
    setContractName(value: string): void { __S.setText(2, value, this); }
    getFunctionName(): string { return __S.getText(3, this); }
    setFunctionName(value: string): void { __S.setText(3, value, this); }
    adoptKwargs(value: capnp.Orphan<Map>): void { __S.adopt(value, __S.getPointer(4, this)); }
    disownKwargs(): capnp.Orphan<Map> { return __S.disown(this.getKwargs()); }
    getKwargs(): Map { return __S.getStruct(4, Map, this); }
    hasKwargs(): boolean { return !__S.isNull(__S.getPointer(4, this)); }
    initKwargs(): Map { return __S.initStructAt(4, Map, this); }
    setKwargs(value: Map): void { __S.copyFrom(value, __S.getPointer(4, this)); }
    toString(): string { return "ContractPayload_" + super.toString(); }
}
export class ContractTransaction extends __S {
    static readonly _capnp = { displayName: "ContractTransaction", id: "ca37bc74f7386799", size: new __O(0, 2) };
    adoptMetadata(value: capnp.Orphan<MetaData>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownMetadata(): capnp.Orphan<MetaData> { return __S.disown(this.getMetadata()); }
    getMetadata(): MetaData { return __S.getStruct(0, MetaData, this); }
    hasMetadata(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initMetadata(): MetaData { return __S.initStructAt(0, MetaData, this); }
    setMetadata(value: MetaData): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptPayload(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownPayload(): capnp.Orphan<capnp.Data> { return __S.disown(this.getPayload()); }
    getPayload(): capnp.Data { return __S.getData(1, this); }
    hasPayload(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initPayload(length: number): capnp.Data { return __S.initData(1, length, this); }
    setPayload(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "ContractTransaction_" + super.toString(); }
}
export class PublishPayload extends __S {
    static readonly _capnp = { displayName: "PublishPayload", id: "fef088de36a4a4b0", size: new __O(8, 4) };
    getSender(): string { return __S.getText(0, this); }
    setSender(value: string): void { __S.setText(0, value, this); }
    getNonce(): string { return __S.getText(1, this); }
    setNonce(value: string): void { __S.setText(1, value, this); }
    getStampsSupplied(): capnp.Uint64 { return __S.getUint64(0, this); }
    setStampsSupplied(value: capnp.Uint64): void { __S.setUint64(0, value, this); }
    getContractName(): string { return __S.getText(2, this); }
    setContractName(value: string): void { __S.setText(2, value, this); }
    getContractCode(): string { return __S.getText(3, this); }
    setContractCode(value: string): void { __S.setText(3, value, this); }
    toString(): string { return "PublishPayload_" + super.toString(); }
}
export class PublishTransaction extends __S {
    static readonly _capnp = { displayName: "PublishTransaction", id: "9c18835ec6f5b892", size: new __O(0, 2) };
    adoptMetadata(value: capnp.Orphan<MetaData>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownMetadata(): capnp.Orphan<MetaData> { return __S.disown(this.getMetadata()); }
    getMetadata(): MetaData { return __S.getStruct(0, MetaData, this); }
    hasMetadata(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initMetadata(): MetaData { return __S.initStructAt(0, MetaData, this); }
    setMetadata(value: MetaData): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptPayload(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownPayload(): capnp.Orphan<capnp.Data> { return __S.disown(this.getPayload()); }
    getPayload(): capnp.Data { return __S.getData(1, this); }
    hasPayload(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initPayload(length: number): capnp.Data { return __S.initData(1, length, this); }
    setPayload(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "PublishTransaction_" + super.toString(); }
}
export class TransactionData extends __S {
    static readonly _capnp = { displayName: "TransactionData", id: "a2d62360f4be217c", size: new __O(8, 3) };
    adoptContractTransaction(value: capnp.Orphan<ContractTransaction>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownContractTransaction(): capnp.Orphan<ContractTransaction> { return __S.disown(this.getContractTransaction()); }
    getContractTransaction(): ContractTransaction { return __S.getStruct(0, ContractTransaction, this); }
    hasContractTransaction(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initContractTransaction(): ContractTransaction { return __S.initStructAt(0, ContractTransaction, this); }
    setContractTransaction(value: ContractTransaction): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    getStatus(): string { return __S.getText(1, this); }
    setStatus(value: string): void { __S.setText(1, value, this); }
    getState(): string { return __S.getText(2, this); }
    setState(value: string): void { __S.setText(2, value, this); }
    getContractType(): number { return __S.getUint16(0, this); }
    setContractType(value: number): void { __S.setUint16(0, value, this); }
    toString(): string { return "TransactionData_" + super.toString(); }
}
export class Transactions extends __S {
    static readonly _capnp = { displayName: "Transactions", id: "bbfe7f501da387e9", size: new __O(0, 1) };
    adoptTransactions(value: capnp.Orphan<capnp.List<capnp.Data>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownTransactions(): capnp.Orphan<capnp.List<capnp.Data>> { return __S.disown(this.getTransactions()); }
    getTransactions(): capnp.List<capnp.Data> { return __S.getList(0, capnp.DataList, this); }
    hasTransactions(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initTransactions(length: number): capnp.List<capnp.Data> { return __S.initList(0, capnp.DataList, length, this); }
    setTransactions(value: capnp.List<capnp.Data>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "Transactions_" + super.toString(); }
}
export class TransactionContainer extends __S {
    static readonly _capnp = { displayName: "TransactionContainer", id: "e0df0e0be01dea86", size: new __O(8, 1) };
    getType(): number { return __S.getUint16(0, this); }
    setType(value: number): void { __S.setUint16(0, value, this); }
    adoptPayload(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownPayload(): capnp.Orphan<capnp.Data> { return __S.disown(this.getPayload()); }
    getPayload(): capnp.Data { return __S.getData(0, this); }
    hasPayload(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initPayload(length: number): capnp.Data { return __S.initData(0, length, this); }
    setPayload(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "TransactionContainer_" + super.toString(); }
}
export class OrderingContainer extends __S {
    static readonly _capnp = { displayName: "OrderingContainer", id: "8c0e979c553fd93f", size: new __O(16, 1) };
    getType(): number { return __S.getUint16(0, this); }
    setType(value: number): void { __S.setUint16(0, value, this); }
    adoptTransaction(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownTransaction(): capnp.Orphan<capnp.Data> { return __S.disown(this.getTransaction()); }
    getTransaction(): capnp.Data { return __S.getData(0, this); }
    hasTransaction(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initTransaction(length: number): capnp.Data { return __S.initData(0, length, this); }
    setTransaction(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    getUtcTimeMs(): capnp.Uint64 { return __S.getUint64(8, this); }
    setUtcTimeMs(value: capnp.Uint64): void { __S.setUint64(8, value, this); }
    toString(): string { return "OrderingContainer_" + super.toString(); }
}
export class TransactionBatch extends __S {
    static readonly _capnp = { displayName: "TransactionBatch", id: "b7fe07c9f4fa8a5b", size: new __O(0, 1) };
    static _Transactions: capnp.ListCtor<OrderingContainer>;
    adoptTransactions(value: capnp.Orphan<capnp.List<OrderingContainer>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownTransactions(): capnp.Orphan<capnp.List<OrderingContainer>> { return __S.disown(this.getTransactions()); }
    getTransactions(): capnp.List<OrderingContainer> { return __S.getList(0, TransactionBatch._Transactions, this); }
    hasTransactions(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initTransactions(length: number): capnp.List<OrderingContainer> { return __S.initList(0, TransactionBatch._Transactions, length, this); }
    setTransactions(value: capnp.List<OrderingContainer>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "TransactionBatch_" + super.toString(); }
}
export class StandardTransaction_Payload extends __S {
    static readonly _capnp = { displayName: "Payload", id: "da2bd110e8191c10", size: new __O(8, 2) };
    adoptSender(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownSender(): capnp.Orphan<capnp.Data> { return __S.disown(this.getSender()); }
    getSender(): capnp.Data { return __S.getData(0, this); }
    hasSender(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initSender(length: number): capnp.Data { return __S.initData(0, length, this); }
    setSender(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptReceiver(value: capnp.Orphan<capnp.Data>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownReceiver(): capnp.Orphan<capnp.Data> { return __S.disown(this.getReceiver()); }
    getReceiver(): capnp.Data { return __S.getData(1, this); }
    hasReceiver(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initReceiver(length: number): capnp.Data { return __S.initData(1, length, this); }
    setReceiver(value: capnp.Data): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    getAmount(): capnp.Uint64 { return __S.getUint64(0, this); }
    setAmount(value: capnp.Uint64): void { __S.setUint64(0, value, this); }
    toString(): string { return "StandardTransaction_Payload_" + super.toString(); }
}
export class StandardTransaction extends __S {
    static readonly Payload = StandardTransaction_Payload;
    static readonly _capnp = { displayName: "StandardTransaction", id: "b7524d22a62ea1c9", size: new __O(0, 2) };
    adoptMetadata(value: capnp.Orphan<MetaData>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownMetadata(): capnp.Orphan<MetaData> { return __S.disown(this.getMetadata()); }
    getMetadata(): MetaData { return __S.getStruct(0, MetaData, this); }
    hasMetadata(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initMetadata(): MetaData { return __S.initStructAt(0, MetaData, this); }
    setMetadata(value: MetaData): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptPayload(value: capnp.Orphan<StandardTransaction_Payload>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownPayload(): capnp.Orphan<StandardTransaction_Payload> { return __S.disown(this.getPayload()); }
    getPayload(): StandardTransaction_Payload { return __S.getStruct(1, StandardTransaction_Payload, this); }
    hasPayload(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    initPayload(): StandardTransaction_Payload { return __S.initStructAt(1, StandardTransaction_Payload, this); }
    setPayload(value: StandardTransaction_Payload): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "StandardTransaction_" + super.toString(); }
}
export enum Value_Which {
    VOID = 0,
    BOOL = 1,
    INT8 = 2,
    INT16 = 3,
    INT32 = 4,
    INT64 = 5,
    UINT8 = 6,
    UINT16 = 7,
    UINT32 = 8,
    UINT64 = 9,
    FIXED_POINT = 10,
    FLOAT32 = 11,
    FLOAT64 = 12,
    TEXT = 13,
    DATA = 14,
    LIST = 15,
    ENUM = 16,
    STRUCT = 17,
    ANY_POINTER = 18
}
export class Value extends __S {
    static readonly VOID = Value_Which.VOID;
    static readonly BOOL = Value_Which.BOOL;
    static readonly INT8 = Value_Which.INT8;
    static readonly INT16 = Value_Which.INT16;
    static readonly INT32 = Value_Which.INT32;
    static readonly INT64 = Value_Which.INT64;
    static readonly UINT8 = Value_Which.UINT8;
    static readonly UINT16 = Value_Which.UINT16;
    static readonly UINT32 = Value_Which.UINT32;
    static readonly UINT64 = Value_Which.UINT64;
    static readonly FIXED_POINT = Value_Which.FIXED_POINT;
    static readonly FLOAT32 = Value_Which.FLOAT32;
    static readonly FLOAT64 = Value_Which.FLOAT64;
    static readonly TEXT = Value_Which.TEXT;
    static readonly DATA = Value_Which.DATA;
    static readonly LIST = Value_Which.LIST;
    static readonly ENUM = Value_Which.ENUM;
    static readonly STRUCT = Value_Which.STRUCT;
    static readonly ANY_POINTER = Value_Which.ANY_POINTER;
    static readonly _capnp = { displayName: "Value", id: "9ef507019559fb0e", size: new __O(16, 1) };
    isVoid(): boolean { return __S.getUint16(0, this) === 0; }
    setVoid(): void { __S.setUint16(0, 0, this); }
    getBool(): boolean {
        __S.testWhich("bool", __S.getUint16(0, this), 1, this);
        return __S.getBit(16, this);
    }
    isBool(): boolean { return __S.getUint16(0, this) === 1; }
    setBool(value: boolean): void {
        __S.setUint16(0, 1, this);
        __S.setBit(16, value, this);
    }
    getInt8(): number {
        __S.testWhich("int8", __S.getUint16(0, this), 2, this);
        return __S.getInt8(2, this);
    }
    isInt8(): boolean { return __S.getUint16(0, this) === 2; }
    setInt8(value: number): void {
        __S.setUint16(0, 2, this);
        __S.setInt8(2, value, this);
    }
    getInt16(): number {
        __S.testWhich("int16", __S.getUint16(0, this), 3, this);
        return __S.getInt16(2, this);
    }
    isInt16(): boolean { return __S.getUint16(0, this) === 3; }
    setInt16(value: number): void {
        __S.setUint16(0, 3, this);
        __S.setInt16(2, value, this);
    }
    getInt32(): number {
        __S.testWhich("int32", __S.getUint16(0, this), 4, this);
        return __S.getInt32(4, this);
    }
    isInt32(): boolean { return __S.getUint16(0, this) === 4; }
    setInt32(value: number): void {
        __S.setUint16(0, 4, this);
        __S.setInt32(4, value, this);
    }
    getInt64(): capnp.Int64 {
        __S.testWhich("int64", __S.getUint16(0, this), 5, this);
        return __S.getInt64(8, this);
    }
    isInt64(): boolean { return __S.getUint16(0, this) === 5; }
    setInt64(value: capnp.Int64): void {
        __S.setUint16(0, 5, this);
        __S.setInt64(8, value, this);
    }
    getUint8(): number {
        __S.testWhich("uint8", __S.getUint16(0, this), 6, this);
        return __S.getUint8(2, this);
    }
    isUint8(): boolean { return __S.getUint16(0, this) === 6; }
    setUint8(value: number): void {
        __S.setUint16(0, 6, this);
        __S.setUint8(2, value, this);
    }
    getUint16(): number {
        __S.testWhich("uint16", __S.getUint16(0, this), 7, this);
        return __S.getUint16(2, this);
    }
    isUint16(): boolean { return __S.getUint16(0, this) === 7; }
    setUint16(value: number): void {
        __S.setUint16(0, 7, this);
        __S.setUint16(2, value, this);
    }
    getUint32(): number {
        __S.testWhich("uint32", __S.getUint16(0, this), 8, this);
        return __S.getUint32(4, this);
    }
    isUint32(): boolean { return __S.getUint16(0, this) === 8; }
    setUint32(value: number): void {
        __S.setUint16(0, 8, this);
        __S.setUint32(4, value, this);
    }
    getUint64(): capnp.Uint64 {
        __S.testWhich("uint64", __S.getUint16(0, this), 9, this);
        return __S.getUint64(8, this);
    }
    isUint64(): boolean { return __S.getUint16(0, this) === 9; }
    setUint64(value: capnp.Uint64): void {
        __S.setUint16(0, 9, this);
        __S.setUint64(8, value, this);
    }
    getFixedPoint(): string {
        __S.testWhich("fixedPoint", __S.getUint16(0, this), 10, this);
        return __S.getText(0, this);
    }
    isFixedPoint(): boolean { return __S.getUint16(0, this) === 10; }
    setFixedPoint(value: string): void {
        __S.setUint16(0, 10, this);
        __S.setText(0, value, this);
    }
    getFloat32(): number {
        __S.testWhich("float32", __S.getUint16(0, this), 11, this);
        return __S.getFloat32(4, this);
    }
    isFloat32(): boolean { return __S.getUint16(0, this) === 11; }
    setFloat32(value: number): void {
        __S.setUint16(0, 11, this);
        __S.setFloat32(4, value, this);
    }
    getFloat64(): number {
        __S.testWhich("float64", __S.getUint16(0, this), 12, this);
        return __S.getFloat64(8, this);
    }
    isFloat64(): boolean { return __S.getUint16(0, this) === 12; }
    setFloat64(value: number): void {
        __S.setUint16(0, 12, this);
        __S.setFloat64(8, value, this);
    }
    getText(): string {
        __S.testWhich("text", __S.getUint16(0, this), 13, this);
        return __S.getText(0, this);
    }
    isText(): boolean { return __S.getUint16(0, this) === 13; }
    setText(value: string): void {
        __S.setUint16(0, 13, this);
        __S.setText(0, value, this);
    }
    adoptData(value: capnp.Orphan<capnp.Data>): void {
        __S.setUint16(0, 14, this);
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownData(): capnp.Orphan<capnp.Data> { return __S.disown(this.getData()); }
    getData(): capnp.Data {
        __S.testWhich("data", __S.getUint16(0, this), 14, this);
        return __S.getData(0, this);
    }
    hasData(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initData(length: number): capnp.Data {
        __S.setUint16(0, 14, this);
        return __S.initData(0, length, this);
    }
    isData(): boolean { return __S.getUint16(0, this) === 14; }
    setData(value: capnp.Data): void {
        __S.setUint16(0, 14, this);
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    adoptList(value: capnp.Orphan<capnp.Pointer>): void {
        __S.setUint16(0, 15, this);
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownList(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getList()); }
    getList(): capnp.Pointer {
        __S.testWhich("list", __S.getUint16(0, this), 15, this);
        return __S.getPointer(0, this);
    }
    hasList(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    isList(): boolean { return __S.getUint16(0, this) === 15; }
    setList(value: capnp.Pointer): void {
        __S.setUint16(0, 15, this);
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    getEnum(): number {
        __S.testWhich("enum", __S.getUint16(0, this), 16, this);
        return __S.getUint16(2, this);
    }
    isEnum(): boolean { return __S.getUint16(0, this) === 16; }
    setEnum(value: number): void {
        __S.setUint16(0, 16, this);
        __S.setUint16(2, value, this);
    }
    adoptStruct(value: capnp.Orphan<capnp.Pointer>): void {
        __S.setUint16(0, 17, this);
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownStruct(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getStruct()); }
    getStruct(): capnp.Pointer {
        __S.testWhich("struct", __S.getUint16(0, this), 17, this);
        return __S.getPointer(0, this);
    }
    hasStruct(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    isStruct(): boolean { return __S.getUint16(0, this) === 17; }
    setStruct(value: capnp.Pointer): void {
        __S.setUint16(0, 17, this);
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    adoptAnyPointer(value: capnp.Orphan<capnp.Pointer>): void {
        __S.setUint16(0, 18, this);
        __S.adopt(value, __S.getPointer(0, this));
    }
    disownAnyPointer(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getAnyPointer()); }
    getAnyPointer(): capnp.Pointer {
        __S.testWhich("anyPointer", __S.getUint16(0, this), 18, this);
        return __S.getPointer(0, this);
    }
    hasAnyPointer(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    isAnyPointer(): boolean { return __S.getUint16(0, this) === 18; }
    setAnyPointer(value: capnp.Pointer): void {
        __S.setUint16(0, 18, this);
        __S.copyFrom(value, __S.getPointer(0, this));
    }
    toString(): string { return "Value_" + super.toString(); }
    which(): Value_Which { return __S.getUint16(0, this); }
}
export class Map_Entry extends __S {
    static readonly _capnp = { displayName: "Entry", id: "d1e642fa99ec5acc", size: new __O(0, 2) };
    getKey(): string { return __S.getText(0, this); }
    setKey(value: string): void { __S.setText(0, value, this); }
    adoptValue(value: capnp.Orphan<capnp.Pointer>): void { __S.adopt(value, __S.getPointer(1, this)); }
    disownValue(): capnp.Orphan<capnp.Pointer> { return __S.disown(this.getValue()); }
    getValue(): capnp.Pointer { return __S.getPointer(1, this); }
    hasValue(): boolean { return !__S.isNull(__S.getPointer(1, this)); }
    setValue(value: capnp.Pointer): void { __S.copyFrom(value, __S.getPointer(1, this)); }
    toString(): string { return "Map_Entry_" + super.toString(); }
}
export class Map extends __S {
    static readonly Entry = Map_Entry;
    static readonly _capnp = { displayName: "Map", id: "a97da21d048f7797", size: new __O(0, 1) };
    static _Entries: capnp.ListCtor<Map_Entry>;
    adoptEntries(value: capnp.Orphan<capnp.List<Map_Entry>>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownEntries(): capnp.Orphan<capnp.List<Map_Entry>> { return __S.disown(this.getEntries()); }
    getEntries(): capnp.List<Map_Entry> { return __S.getList(0, Map._Entries, this); }
    hasEntries(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initEntries(length: number): capnp.List<Map_Entry> { return __S.initList(0, Map._Entries, length, this); }
    setEntries(value: capnp.List<Map_Entry>): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "Map_" + super.toString(); }
}
export class Kwargs extends __S {
    static readonly _capnp = { displayName: "Kwargs", id: "c803c0184eb67ef2", size: new __O(0, 1) };
    adoptKwargs(value: capnp.Orphan<Map>): void { __S.adopt(value, __S.getPointer(0, this)); }
    disownKwargs(): capnp.Orphan<Map> { return __S.disown(this.getKwargs()); }
    getKwargs(): Map { return __S.getStruct(0, Map, this); }
    hasKwargs(): boolean { return !__S.isNull(__S.getPointer(0, this)); }
    initKwargs(): Map { return __S.initStructAt(0, Map, this); }
    setKwargs(value: Map): void { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString(): string { return "Kwargs_" + super.toString(); }
}
TransactionBatch._Transactions = capnp.CompositeList(OrderingContainer);
Map._Entries = capnp.CompositeList(Map_Entry);
